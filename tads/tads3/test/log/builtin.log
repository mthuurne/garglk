Warnings: 0
Errors:   0
Longest string: 124, longest list: 10

(T3VM) Memory blocks still in use:

Total blocks in use: 0
built-in function tests
str.length() = 26
str.substr(5) = [efghijklmnopqrstuvwxyz]
str.substr(7, 11) = [ghijklmnopq]
str.substr(7, 30) = [ghijklmnopqrstuvwxyz]
str.substr(30) = []
str.substr(30, 8) = []

str.startsWith(a) = yes
str.startsWith(b) = no
str.startsWith(abc) = yes
str.startsWith(abcdef) = yes
str.startsWith(bc) = no
str.startsWith(abcefg) = no

str.endWith(z) = yes
str.endWith(y) = no
str.endsWith(xyz) = yes
str.endsWith(tuvwxyz) = yes
str.endsWith(xy) = no
str.endsWith(tuvxyz) = no

lst.length() = 10
lst.sublist(5) = [five, six, seven, eight, nine, ten]
lst.sublist(5, 3) = [five, six, seven]
lst.sublist(5, 15) = [five, six, seven, eight, nine, ten]
lst.sublist(15) = []
lst.sublist(15, 3) = []
lst.car() = one
lst.cdr() = [two, three, four, five, six, seven, eight, nine, ten]
[].car() = nil? yes
[].cdr() = nil? yes
lst - 'three' -> [one, two, four, five, six, seven, eight, nine, ten]
lst - ['four', 'eight'] -> [one, two, three, five, six, seven, nine, ten]
lst - ['four', '123', 'nine'] -> [one, two, three, five, six, seven, eight,
ten]
lst2 == ['one', [2, 3], 'four']: true
lst2 == ['one', 2, 3, 'four']: nil
lst2 == ['one', [3, 4], 'four']: nil

dataType() tests
dataType(nil) = 1
dataType(true) = 2
dataType(obj1) = 5
dataType(&prop1) = 6
dataType(123) = 7
dataType('hello') = 8
dataType('abcdefghijklmnopqrstuvwxyz1234567890' /*dynamic string*/) = 8
dataType([1, 2, 3]) = 10
dataType([ONE, two, three, four, five, six, seven, eight, nine, ten] /*dynamic
list*/) = 10
dataType(_main) = 12

varargs tests
varfunc(1): 1
varfunc(1, 2, 3): 1, 2, 3

upper/lower test
upper('This is a TEST of UPPER and lower. 123;!@#$') = 'THIS IS A TEST OF UPPER
AND LOWER. 123;!@#$'
lower('This is a TEST of UPPER and lower. 123;!@#$') = 'this is a test of upper
and lower. 123;!@#$'

toString test
toString(123) = 123
toString(123, 8) = 173
toString(123, 16) = 7B
toString(true) = true
toString(nil) = nil
toString(0xffffffff, 10) = -1
toString(0xffffffff, 16) = FFFFFFFF
toString(0xffffffff, 8) = 37777777777
toString(0xffffffff, 2) = 11111111111111111111111111111111
toString(0xffffffff, 10, nil) = 4294967295
toString(0xffffffff, 16, true) = -1
toString(0xffffffff, 8, true) = -1
toString(0xffffffff, 2, true) = -1
toInteger test
toInteger('nil') = 0
toInteger('true') = 1
toInteger(' nil ') = 0
toInteger(' true ') = 1
toInteger(' + 123') = 123
toInteger('ffff', 16) = 65535
toInteger('123', 8) = 83
toInteger('11111111', 2) = 255
toInteger('100', 12) = 144
toInteger('ABCDEF', 16) = 11259375
toInteger('abcdef', 15) = 546284
toInteger('ABCDEF', 14) = 29777
toInteger(' - ABCDEF', 13) = -1845
toInteger('ABCDEF', 12) = 131
toInteger('ABCDEF', 11) = 10
toInteger('ABCDEF', 10) = 0
toInteger('6789', 10) = 6789
toInteger('6789', 9) = 557
toInteger('6789', 8) = 55
toInteger('6789', 7) = 6
toInteger('2147483640') = 2147483640
toInteger('2147483647') = 2147483647
toInteger('2147483648') = Runtime Error: 2023
toInteger('2147483649') = Runtime Error: 2023
toInteger('2147483650') = Runtime Error: 2023
toInteger('-2147483647') = -2147483647
toInteger('-2147483648') = -2147483648
toInteger('-2147483649') = Runtime Error: 2023
toInteger('7fffffff', 16) = 2147483647
toInteger('80000000', 16) = -2147483648
toInteger('80000001', 16) = -2147483647
toInteger('-7fffffff', 16) = -2147483647
toInteger('-80000000', 16) = -2147483648
toInteger('-80000001', 16) = Runtime Error: 2023
toInteger('ffffffff', 16) = -1
toInteger('ffffffff1', 16) = Runtime Error: 2023
toInteger('11fffffff', 16) = Runtime Error: 2023
toInteger('1ffffffff', 16) = Runtime Error: 2023
toNumber('ABCDEF', 16) = 11259375
toNumber('7fffffff', 16) = 2147483647
toNumber('80000000', 16) = -2147483648
toNumber('100000000', 16) = 4294967296 (BigNumber)
toNumber('ffffffffffffffff', 16) = 18446744073709551615 (BigNumber)
toNumber('ZZZZZZZ', 36) = 78364164095 (BigNumber)
toNumber('1000000000') = 1000000000
toNumber('2000000000') = 2000000000
toNumber('4000000000') = 4000000000 (BigNumber)
toNumber('1.234') = 1.234 (BigNumber)
toNumber('1234e') = 1234
toNumber('1234e+') = 1234
toNumber('1234e+20e') = 123400000000000000000000 (BigNumber)
toNumber('.1234e+2') = 12.34 (BigNumber)
toNumber('1234.') = 1234 (BigNumber)
toNumber(true) = 1
toNumber(nil) = 0
toNumber(' true ', 16) = 1
toNumber(' nil ', 7) = 0
find() test
'abcdefghijklmnopqrstuvwxyz1234567890'.find('') = 1
'abcdefghijklmnopqrstuvwxyz1234567890'.find('abcdef') = 1
'abcdefghijklmnopqrstuvwxyz1234567890'.find('xyz') = 24
'abcdefghijklmnopqrstuvwxyz1234567890'.find('1234567890') = 27
'abcdefghijklmnopqrstuvwxyz1234567890'.find('xxx') =
[ONE, two, three, four, five, six, seven, eight, nine, ten].indexOf('one') =
[ONE, two, three, four, five, six, seven, eight, nine, ten].indexOf('ONE') = 1
[ONE, two, three, four, five, six, seven, eight, nine, ten].indexOf('two') = 2
[ONE, two, three, four, five, six, seven, eight, nine, ten].indexOf('ten') = 10
[ONE, two, three, four, five, six, seven, eight, nine, ten].indexOf('222') =
[1, [2, 3], 4].indexOf([2, 3]) = 2
[1, [2, 3], 4].indexOf([3, 4]) =
[1, 2, 3, 4].intersect([3, 4, 5]) = [3, 4]
lst3.intersect(lst4) = [four, five]
lst3.intersect(['three', 'six']) = [three]
['two', 'four', 'eight'].intersect(lst3) = [two, four]
lst3.intersect(['six', 'seven', 'eight', 'nine', 'ten']) = []

Regular Expression Tests
pat1 = '%<test%>'
pat2 = '([a-z]+) *%1'
pat3 = '([a-z]+)([0-9]+)'
search(pat1, 'this is a test') = [11, 4, test]
search(pat1, 'testing some tests') = nil
search(pat1, 'testing a test run') = [11, 4, test]
search(pat2, 'abc def ghi') = nil
search(pat2, 'abc def def ghi') = [5, 7, def def]
group(1) = [5, 3, def]
search(pat4='<lparen>(.*?)<space>*<alpha>+<rparen>', '/hrabes/vyhrabala (v cem)
(asfd)') = [19, 7, (v cem)]
   %1 = 'v' (index=20, len=1)
search(pat4='<lparen>(.*?)<space>*<alpha>+<rparen>', '/hrabes/vyhrabala (verb
cem) (asfd)') = [19, 10, (verb cem)]
   %1 = 'verb' (index=20, len=4)
search(pat4a='<lparen>(.*?)(<space>*<alpha>+)<rparen>', '/hrabes/vyhrabala (v
cem) (asfd)') = [19, 7, (v cem)]
   %1 = 'v' (index=20, len=1)
   %2 = ' cem' (index=21, len=4)
search(pat4a='<lparen>(.*?)(<space>*<alpha>+)<rparen>', '/hrabes/vyhrabala
(verb cem) (asfd)') = [19, 10, (verb cem)]
   %1 = 'verb' (index=20, len=4)
   %2 = ' cem' (index=24, len=4)
search(pat4b='<lparen>(.*?)<space>*(<alpha>+)<rparen>', '/hrabes/vyhrabala (v
cem) (asfd)') = [19, 7, (v cem)]
   %1 = 'v' (index=20, len=1)
   %2 = 'cem' (index=22, len=3)
search(pat4b='<lparen>(.*?)<space>*(<alpha>+)<rparen>', '/hrabes/vyhrabala
(verb cem) (asfd)') = [19, 10, (verb cem)]
   %1 = 'verb' (index=20, len=4)
   %2 = 'cem' (index=25, len=3)
search(pat4c='<lparen>(|(.*?)<space>)(<alpha>+)<rparen>', '/hrabes/vyhrabala (v
cem) (asfd)') = [19, 7, (v cem)]
   %1 = 'v ' (index=20, len=2)
   %2 = 'v' (index=20, len=1)
   %3 = 'cem' (index=22, len=3)
search(pat4c='<lparen>(|(.*?)<space>)(<alpha>+)<rparen>', '/hrabes/vyhrabala
(verb cem) (asfd)') = [19, 10, (verb cem)]
   %1 = 'verb ' (index=20, len=5)
   %2 = 'verb' (index=20, len=4)
   %3 = 'cem' (index=25, len=3)
search(pat5='%((|(.*) )(<alpha>+)%)', 'test (a xyz) TEST') = [6, 7, (a xyz)]
   %1 = 'a ' (index=7, len=2)
   %2 = 'a' (index=7, len=1)
   %3 = 'xyz' (index=9, len=3)
search(pat5='%((|(.*) )(<alpha>+)%)', 'test (abc xyz) TEST') = [6, 9, (abc
xyz)]
   %1 = 'abc ' (index=7, len=4)
   %2 = 'abc' (index=7, len=3)
   %3 = 'xyz' (index=11, len=3)
match(pat1, 'this is a test') =
match(pat1, 'test a bit') = 4
match(pat1, 'testing one two three') =
match(pat3, 'abcdef123!!!') = 9
group(1) = [1, 6, abcdef]
group(2) = [7, 3, 123]
replace(pat1, 'this is a test', 'TEST!!!', ReplaceOnce) = this is a TEST!!!
replace(pat3, 'this is box123!!!', '%2%1', ReplaceOnce) = this is 123box!!!
replace(pat2, 'abc def def ghi', '<%*><%*>', ReplaceOnce) = abc <def def><def
def> ghi
replace('^[a-z]*$', 'this is a test', '%*%*', ReplaceOnce) = this is a test
replace('^[a-z]*$', 'testing', '%*%*', ReplaceOnce) = testingtesting
replace('%([0-9][0-9][0-9]%) *[0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]', 'dial
(800) 555-1212 on phone', '"%*"', ReplaceOnce) = dial "(800) 555-1212" on phone
replace('[0-9]+', 'abc 123 def 456 789 ghi', '(%*)', ReplaceAll) = abc (123)
def (456) (789) ghi
replace('[0-9]+', '123 def 456 789', '(%*)', ReplaceAll) = (123) def (456)
(789)
replace('[0-9]+', 'abc 123 def 456 789 ghi', '(%*)', ReplaceOnce) = abc (123)
def 456 789 ghi
replace('([a-z])([0-9]+)', 'x1937y2908z4200d', '%1 := %2; ', ReplaceAll) = x :=
1937; y := 2908; z := 4200; d

(T3VM) Memory blocks still in use:

Total blocks in use: 0
